# Reading C:/modeltech64_10.7/tcl/vsim/pref.tcl
# //  ModelSim SE-64 10.7 Dec  7 2017
# //
# //  Copyright 1991-2017 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  ModelSim SE-64 and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# do run.do
# 1
# Model Technology ModelSim SE-64 vlog 10.7 Compiler 2017.12 Dec  7 2017
# Start time: 19:56:33 on Mar 17,2021
# vlog -reportprogress 300 -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling interface tb_ifc
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 19:56:34 on Mar 17,2021, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# vsim -voptargs="+acc" -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top 
# Start time: 19:56:34 on Mar 17,2021
# ** Note: (vsim-3812) Design is being optimized...
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# 
# Writing to register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
# 
# Writing to register location 2: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 8
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# 
# Read from register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
# 
# Read from register location 2: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 8
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(57)
#    Time: 166 ns  Iteration: 2  Instance: /top/test
# 1
# Break in Module instr_register_test at ../lab01_testbench-interface/instr_register_test.sv line 57
# Simulation Breakpoint: 1
# Break in Module instr_register_test at ../lab01_testbench-interface/instr_register_test.sv line 57
# MACRO ./run.do PAUSED at line 45
# End time: 19:57:22 on Mar 17,2021, Elapsed time: 0:00:48
# Errors: 0, Warnings: 0
